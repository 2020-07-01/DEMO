package leetcode;

/**
 * @ClassName : Demo
 * @Author : yq
 * @Date: 2020-09-30
 * @Description : 算法总结
 */
public class Demo {

    /**
     * 动态规划：将一个问题分解成若干个子问题，先求解子问题，然后从子问题的解中得到原问题的解，但是子问题往往不是相互独立的
     * 1.连续数组最大值
     * 2.隔离一个数值获取最大值
     * 3.斐切那波数列
     * 4.两步楼梯与三步楼梯的区别
     * 5.二维数组路径问题：从左上角到右下角最值及走过的路径等等
     */

    /**
     * 贪心算法：
     * 做出当前看来最好的选择，获取局部最优解，进而获取问题的最优解
     * 将一个大的问题划分成多个相同但互不影响的子问题，通过子问题的最优解求出最终解
     * 1.换酒问题
     */


    /**
     * 数组：
     * 1.最长公共前缀算法：暴力，动态规划，滑动窗口
     * 矩阵的转置，旋转
     * 辅助数组法
     * 数组的深拷贝
     * 倒数第k大/小元素
     */

    /**
     * 双指针法： 双指针法也可以提前遍历确定指针位置
     * 前后指针进行覆盖
     * 前后指针进行删除
     * Floyd(龟兔赛跑法，判圈算法)
     *
     * 快慢指针法：一个指针每次走一步，另一个指针每次走两步，如果相遇则存在环
     * 可以判断链表是否存在环
     * 找出相同的元素
     *
     * 双指针哑节点问题
     */


    /**
     * 二叉搜索树：
     * 中序遍历：递增
     */


    /**
     * 二分查找法：结束条件以及结束时取值问题
     * 二分左边界搜索法 ： 744. 寻找比目标字母大的最小字母
     */

    /**
     * 回溯法：
     */


    /**
     * 摩尔投票法：
     */


    /**
     * 哈希：
     *
     * 1.和为k的子数组
     * 2.和可整除K的子数组
     */


    /**
     * 深度优先遍历：
     */

    /**
     * 栈抵消法：
     *
     */

    /**
     * Set抵消法：
     * 1.判断回文排列
     */


    /**
     * 前缀树：
     */


    /**
     * 剪枝算法：
     */

    /**
     * 链表：
     * 链表相交
     * 环形链表
     */

    /**
     *
     * 拓扑排序：
     */

}
